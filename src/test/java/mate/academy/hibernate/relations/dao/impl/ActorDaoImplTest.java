package mate.academy.hibernate.relations.dao.impl;

import java.util.Optional;
import mate.academy.hibernate.relations.dao.AbstractTest;
import mate.academy.hibernate.relations.dao.ActorDao;
import mate.academy.hibernate.relations.model.Actor;
import mate.academy.hibernate.relations.model.Country;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class ActorDaoImplTest extends AbstractTest {
    private static final Actor christianBale = new Actor("Christian Bale");
    private static final Actor bradPitt = new Actor("Brad Pitt");

    @Override
    protected Class<?>[] entities() {
        return new Class[]{Actor.class, Country.class};
    }

    @Test
    public void create_Ok() {
        ActorDao actorDao = new ActorDaoImpl(getSessionFactory());
        verifyCreateActorWorks(actorDao, christianBale.clone(), 1L);
        verifyCreateActorWorks(actorDao, bradPitt.clone(), 2L);
    }

    @Test
    public void getById_Ok() {
        ActorDao actorDao = new ActorDaoImpl(getSessionFactory());
        verifyCreateActorWorks(actorDao, christianBale.clone(), 1L);
        Optional<Actor> christianBaleOptional = actorDao.get(1L);
        Assertions.assertTrue(christianBaleOptional.isPresent());
        Actor actualChristianBale = christianBaleOptional.get();
        Assertions.assertNotNull(actualChristianBale);
        Assertions.assertEquals(1L, actualChristianBale.getId());
        Assertions.assertEquals(christianBale.getName(), actualChristianBale.getName());

        verifyCreateActorWorks(actorDao, bradPitt.clone(), 2L);
        Optional<Actor> bradPittOptional = actorDao.get(2L);
        Assertions.assertTrue(bradPittOptional.isPresent());
        Actor actualBradPitt = bradPittOptional.get();
        Assertions.assertNotNull(actualBradPitt);
        Assertions.assertEquals(2L, actualBradPitt.getId());
        Assertions.assertEquals(bradPitt.getName(), actualBradPitt.getName());
    }

    @Test
    public void getByNotExistingId_Ok() {
        ActorDao actorDao = new ActorDaoImpl(getSessionFactory());
        Optional<Actor> actual = actorDao.get(100L);
        Assertions.assertFalse(actual.isPresent());
    }

    static void verifyCreateActorWorks(ActorDao actorDao, Actor actor, Long expectedId) {
        Actor actual = actorDao.add(actor);
        Assertions.assertNotNull(actual, "Check you have implemented the `create` method "
                + "in the ActorDaoImpl class");
        Assertions.assertNotNull(actual.getId(), "ID for actor should be autogenerated");
        Assertions.assertEquals(expectedId, actual.getId());
        Assertions.assertEquals(actor.getName(), actual.getName());
    }
}
